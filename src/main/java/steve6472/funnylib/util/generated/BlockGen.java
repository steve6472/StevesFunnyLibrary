package steve6472.funnylib.util.generated;

import org.bukkit.block.data.*;
import org.bukkit.block.data.type.*;

import java.util.HashMap;
import org.bukkit.block.BlockFace;
import org.bukkit.Instrument;
import org.bukkit.Material;
import org.bukkit.Axis;
import org.bukkit.Note;

/**
 * Generated by BlockStateCodeGenerator
 */

@SuppressWarnings("unused")
public class BlockGen
{
	public static Faces Faces()
	{
		return new Faces();
	}

	public static class Faces
	{
		HashMap<BlockFace, Boolean> faces = new HashMap<>();

		public Faces setFace(BlockFace face, boolean has)
		{
			faces.put(face, has);
			return this;
		}
	}



	public static WallFaces WallFaces()
 	{
 		return new WallFaces();
 	}

 	public static class WallFaces
 	{
 		HashMap<BlockFace, Wall.Height> faces = new HashMap<>();

 		public WallFaces setFace(BlockFace face, Wall.Height height)
 		{
 			faces.put(face, height);
 			return this;
 		}
 	}



   	public static RedFaces RedFaces()
   	{
   		return new RedFaces();
   	}

   	public static class RedFaces
   	{
   		HashMap<BlockFace, RedstoneWire.Connection> faces = new HashMap<>();

   		public RedFaces setFace(BlockFace face, RedstoneWire.Connection connection)
   		{
   			faces.put(face, connection);
   			return this;
   		}
   	}




	public static BlockData Deepslate(Axis axis)
	{
		Orientable data = (Orientable) Material.DEEPSLATE.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData GrassBlock(boolean snowy)
	{
		Snowable data = (Snowable) Material.GRASS_BLOCK.createBlockData();
		data.setSnowy(snowy);
		return data;
	}

	public static BlockData Podzol(boolean snowy)
	{
		Snowable data = (Snowable) Material.PODZOL.createBlockData();
		data.setSnowy(snowy);
		return data;
	}

	public static BlockData OakSapling(int stage)
	{
		Sapling data = (Sapling) Material.OAK_SAPLING.createBlockData();
		data.setStage(stage);
		return data;
	}

	public static BlockData SpruceSapling(int stage)
	{
		Sapling data = (Sapling) Material.SPRUCE_SAPLING.createBlockData();
		data.setStage(stage);
		return data;
	}

	public static BlockData BirchSapling(int stage)
	{
		Sapling data = (Sapling) Material.BIRCH_SAPLING.createBlockData();
		data.setStage(stage);
		return data;
	}

	public static BlockData JungleSapling(int stage)
	{
		Sapling data = (Sapling) Material.JUNGLE_SAPLING.createBlockData();
		data.setStage(stage);
		return data;
	}

	public static BlockData AcaciaSapling(int stage)
	{
		Sapling data = (Sapling) Material.ACACIA_SAPLING.createBlockData();
		data.setStage(stage);
		return data;
	}

	public static BlockData DarkOakSapling(int stage)
	{
		Sapling data = (Sapling) Material.DARK_OAK_SAPLING.createBlockData();
		data.setStage(stage);
		return data;
	}

	public static BlockData MangrovePropagule(int age, boolean hanging, int stage, boolean waterlogged)
	{
		MangrovePropagule data = (MangrovePropagule) Material.MANGROVE_PROPAGULE.createBlockData();
		data.setAge(age);
		data.setHanging(hanging);
		data.setStage(stage);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData RedstoneOre(boolean lit)
	{
		Lightable data = (Lightable) Material.REDSTONE_ORE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData DeepslateRedstoneOre(boolean lit)
	{
		Lightable data = (Lightable) Material.DEEPSLATE_REDSTONE_ORE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData CutCopperStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.CUT_COPPER_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData ExposedCutCopperStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.EXPOSED_CUT_COPPER_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WeatheredCutCopperStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.WEATHERED_CUT_COPPER_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData OxidizedCutCopperStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.OXIDIZED_CUT_COPPER_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData CutCopperSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.CUT_COPPER_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData ExposedCutCopperSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.EXPOSED_CUT_COPPER_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WeatheredCutCopperSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.WEATHERED_CUT_COPPER_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData OxidizedCutCopperSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.OXIDIZED_CUT_COPPER_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WaxedCutCopperStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.WAXED_CUT_COPPER_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WaxedExposedCutCopperStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.WAXED_EXPOSED_CUT_COPPER_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WaxedWeatheredCutCopperStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.WAXED_WEATHERED_CUT_COPPER_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WaxedOxidizedCutCopperStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.WAXED_OXIDIZED_CUT_COPPER_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WaxedCutCopperSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.WAXED_CUT_COPPER_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WaxedExposedCutCopperSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.WAXED_EXPOSED_CUT_COPPER_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WaxedWeatheredCutCopperSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.WAXED_WEATHERED_CUT_COPPER_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WaxedOxidizedCutCopperSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.WAXED_OXIDIZED_CUT_COPPER_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData OakLog(Axis axis)
	{
		Orientable data = (Orientable) Material.OAK_LOG.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData SpruceLog(Axis axis)
	{
		Orientable data = (Orientable) Material.SPRUCE_LOG.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData BirchLog(Axis axis)
	{
		Orientable data = (Orientable) Material.BIRCH_LOG.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData JungleLog(Axis axis)
	{
		Orientable data = (Orientable) Material.JUNGLE_LOG.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData AcaciaLog(Axis axis)
	{
		Orientable data = (Orientable) Material.ACACIA_LOG.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData DarkOakLog(Axis axis)
	{
		Orientable data = (Orientable) Material.DARK_OAK_LOG.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData MangroveLog(Axis axis)
	{
		Orientable data = (Orientable) Material.MANGROVE_LOG.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData MangroveRoots(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.MANGROVE_ROOTS.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MuddyMangroveRoots(Axis axis)
	{
		Orientable data = (Orientable) Material.MUDDY_MANGROVE_ROOTS.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData CrimsonStem(Axis axis)
	{
		Orientable data = (Orientable) Material.CRIMSON_STEM.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData WarpedStem(Axis axis)
	{
		Orientable data = (Orientable) Material.WARPED_STEM.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedOakLog(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_OAK_LOG.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedSpruceLog(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_SPRUCE_LOG.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedBirchLog(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_BIRCH_LOG.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedJungleLog(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_JUNGLE_LOG.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedAcaciaLog(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_ACACIA_LOG.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedDarkOakLog(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_DARK_OAK_LOG.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedMangroveLog(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_MANGROVE_LOG.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedCrimsonStem(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_CRIMSON_STEM.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedWarpedStem(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_WARPED_STEM.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedOakWood(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_OAK_WOOD.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedSpruceWood(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_SPRUCE_WOOD.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedBirchWood(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_BIRCH_WOOD.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedJungleWood(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_JUNGLE_WOOD.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedAcaciaWood(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_ACACIA_WOOD.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedDarkOakWood(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_DARK_OAK_WOOD.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedMangroveWood(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_MANGROVE_WOOD.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedCrimsonHyphae(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_CRIMSON_HYPHAE.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData StrippedWarpedHyphae(Axis axis)
	{
		Orientable data = (Orientable) Material.STRIPPED_WARPED_HYPHAE.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData OakWood(Axis axis)
	{
		Orientable data = (Orientable) Material.OAK_WOOD.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData SpruceWood(Axis axis)
	{
		Orientable data = (Orientable) Material.SPRUCE_WOOD.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData BirchWood(Axis axis)
	{
		Orientable data = (Orientable) Material.BIRCH_WOOD.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData JungleWood(Axis axis)
	{
		Orientable data = (Orientable) Material.JUNGLE_WOOD.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData AcaciaWood(Axis axis)
	{
		Orientable data = (Orientable) Material.ACACIA_WOOD.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData DarkOakWood(Axis axis)
	{
		Orientable data = (Orientable) Material.DARK_OAK_WOOD.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData MangroveWood(Axis axis)
	{
		Orientable data = (Orientable) Material.MANGROVE_WOOD.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData CrimsonHyphae(Axis axis)
	{
		Orientable data = (Orientable) Material.CRIMSON_HYPHAE.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData WarpedHyphae(Axis axis)
	{
		Orientable data = (Orientable) Material.WARPED_HYPHAE.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData OakLeaves(int distance, boolean persistent, boolean waterlogged)
	{
		Leaves data = (Leaves) Material.OAK_LEAVES.createBlockData();
		data.setDistance(distance);
		data.setPersistent(persistent);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SpruceLeaves(int distance, boolean persistent, boolean waterlogged)
	{
		Leaves data = (Leaves) Material.SPRUCE_LEAVES.createBlockData();
		data.setDistance(distance);
		data.setPersistent(persistent);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BirchLeaves(int distance, boolean persistent, boolean waterlogged)
	{
		Leaves data = (Leaves) Material.BIRCH_LEAVES.createBlockData();
		data.setDistance(distance);
		data.setPersistent(persistent);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData JungleLeaves(int distance, boolean persistent, boolean waterlogged)
	{
		Leaves data = (Leaves) Material.JUNGLE_LEAVES.createBlockData();
		data.setDistance(distance);
		data.setPersistent(persistent);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData AcaciaLeaves(int distance, boolean persistent, boolean waterlogged)
	{
		Leaves data = (Leaves) Material.ACACIA_LEAVES.createBlockData();
		data.setDistance(distance);
		data.setPersistent(persistent);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DarkOakLeaves(int distance, boolean persistent, boolean waterlogged)
	{
		Leaves data = (Leaves) Material.DARK_OAK_LEAVES.createBlockData();
		data.setDistance(distance);
		data.setPersistent(persistent);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MangroveLeaves(int distance, boolean persistent, boolean waterlogged)
	{
		Leaves data = (Leaves) Material.MANGROVE_LEAVES.createBlockData();
		data.setDistance(distance);
		data.setPersistent(persistent);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData AzaleaLeaves(int distance, boolean persistent, boolean waterlogged)
	{
		Leaves data = (Leaves) Material.AZALEA_LEAVES.createBlockData();
		data.setDistance(distance);
		data.setPersistent(persistent);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData FloweringAzaleaLeaves(int distance, boolean persistent, boolean waterlogged)
	{
		Leaves data = (Leaves) Material.FLOWERING_AZALEA_LEAVES.createBlockData();
		data.setDistance(distance);
		data.setPersistent(persistent);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SeaPickle(int pickles, boolean waterlogged)
	{
		SeaPickle data = (SeaPickle) Material.SEA_PICKLE.createBlockData();
		data.setPickles(pickles);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WeepingVines(int age)
	{
		Ageable data = (Ageable) Material.WEEPING_VINES.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData TwistingVines(int age)
	{
		Ageable data = (Ageable) Material.TWISTING_VINES.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData SugarCane(int age)
	{
		Ageable data = (Ageable) Material.SUGAR_CANE.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData Kelp(int age)
	{
		Ageable data = (Ageable) Material.KELP.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData HangingRoots(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.HANGING_ROOTS.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BigDripleaf(BigDripleaf.Tilt tilt, BlockFace facing, boolean waterlogged)
	{
		BigDripleaf data = (BigDripleaf) Material.BIG_DRIPLEAF.createBlockData();
		data.setTilt(tilt);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SmallDripleaf(BlockFace facing, boolean waterlogged, Bisected.Half half)
	{
		SmallDripleaf data = (SmallDripleaf) Material.SMALL_DRIPLEAF.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		data.setHalf(half);
		return data;
	}

	public static BlockData Bamboo(Bamboo.Leaves leaves, int age, int stage)
	{
		Bamboo data = (Bamboo) Material.BAMBOO.createBlockData();
		data.setLeaves(leaves);
		data.setAge(age);
		data.setStage(stage);
		return data;
	}

	public static BlockData OakSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.OAK_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SpruceSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.SPRUCE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BirchSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.BIRCH_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData JungleSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.JUNGLE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData AcaciaSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.ACACIA_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DarkOakSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.DARK_OAK_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MangroveSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.MANGROVE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData CrimsonSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.CRIMSON_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WarpedSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.WARPED_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData StoneSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.STONE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SmoothStoneSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.SMOOTH_STONE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SandstoneSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.SANDSTONE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData CutSandstoneSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.CUT_SANDSTONE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PetrifiedOakSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.PETRIFIED_OAK_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData CobblestoneSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.COBBLESTONE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BrickSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.BRICK_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData StoneBrickSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.STONE_BRICK_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MudBrickSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.MUD_BRICK_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData NetherBrickSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.NETHER_BRICK_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData QuartzSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.QUARTZ_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData RedSandstoneSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.RED_SANDSTONE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData CutRedSandstoneSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.CUT_RED_SANDSTONE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PurpurSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.PURPUR_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PrismarineSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.PRISMARINE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PrismarineBrickSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.PRISMARINE_BRICK_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DarkPrismarineSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.DARK_PRISMARINE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData EndRod(BlockFace facing)
	{
		Directional data = (Directional) Material.END_ROD.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData ChorusPlant(Faces face)
	{
		MultipleFacing data = (MultipleFacing) Material.CHORUS_PLANT.createBlockData();
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData ChorusFlower(int age)
	{
		Ageable data = (Ageable) Material.CHORUS_FLOWER.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData PurpurPillar(Axis axis)
	{
		Orientable data = (Orientable) Material.PURPUR_PILLAR.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData PurpurStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.PURPUR_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData Chest(Chest.Type type, BlockFace facing, boolean waterlogged)
	{
		Chest data = (Chest) Material.CHEST.createBlockData();
		data.setType(type);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData Farmland(int moisture)
	{
		Farmland data = (Farmland) Material.FARMLAND.createBlockData();
		data.setMoisture(moisture);
		return data;
	}

	public static BlockData Furnace(BlockFace facing, boolean lit)
	{
		Furnace data = (Furnace) Material.FURNACE.createBlockData();
		data.setFacing(facing);
		data.setLit(lit);
		return data;
	}

	public static BlockData Ladder(BlockFace facing, boolean waterlogged)
	{
		Ladder data = (Ladder) Material.LADDER.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData CobblestoneStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.COBBLESTONE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData Snow(int layers)
	{
		Snow data = (Snow) Material.SNOW.createBlockData();
		data.setLayers(layers);
		return data;
	}

	public static BlockData Cactus(int age)
	{
		Ageable data = (Ageable) Material.CACTUS.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData Jukebox()
	{
		Jukebox data = (Jukebox) Material.JUKEBOX.createBlockData();
		return data;
	}

	public static BlockData OakFence(Faces face, boolean waterlogged)
	{
		Fence data = (Fence) Material.OAK_FENCE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData SpruceFence(Faces face, boolean waterlogged)
	{
		Fence data = (Fence) Material.SPRUCE_FENCE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData BirchFence(Faces face, boolean waterlogged)
	{
		Fence data = (Fence) Material.BIRCH_FENCE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData JungleFence(Faces face, boolean waterlogged)
	{
		Fence data = (Fence) Material.JUNGLE_FENCE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData AcaciaFence(Faces face, boolean waterlogged)
	{
		Fence data = (Fence) Material.ACACIA_FENCE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData DarkOakFence(Faces face, boolean waterlogged)
	{
		Fence data = (Fence) Material.DARK_OAK_FENCE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData MangroveFence(Faces face, boolean waterlogged)
	{
		Fence data = (Fence) Material.MANGROVE_FENCE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData CrimsonFence(Faces face, boolean waterlogged)
	{
		Fence data = (Fence) Material.CRIMSON_FENCE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData WarpedFence(Faces face, boolean waterlogged)
	{
		Fence data = (Fence) Material.WARPED_FENCE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData CarvedPumpkin(BlockFace facing)
	{
		Directional data = (Directional) Material.CARVED_PUMPKIN.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData JackOLantern(BlockFace facing)
	{
		Directional data = (Directional) Material.JACK_O_LANTERN.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData Basalt(Axis axis)
	{
		Orientable data = (Orientable) Material.BASALT.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData PolishedBasalt(Axis axis)
	{
		Orientable data = (Orientable) Material.POLISHED_BASALT.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData InfestedDeepslate(Axis axis)
	{
		Orientable data = (Orientable) Material.INFESTED_DEEPSLATE.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData BrownMushroomBlock(Faces face)
	{
		MultipleFacing data = (MultipleFacing) Material.BROWN_MUSHROOM_BLOCK.createBlockData();
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData RedMushroomBlock(Faces face)
	{
		MultipleFacing data = (MultipleFacing) Material.RED_MUSHROOM_BLOCK.createBlockData();
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData MushroomStem(Faces face)
	{
		MultipleFacing data = (MultipleFacing) Material.MUSHROOM_STEM.createBlockData();
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData IronBars(Faces face, boolean waterlogged)
	{
		Fence data = (Fence) Material.IRON_BARS.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData Chain(Axis axis, boolean waterlogged)
	{
		Chain data = (Chain) Material.CHAIN.createBlockData();
		data.setAxis(axis);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData GlassPane(Faces face, boolean waterlogged)
	{
		Fence data = (Fence) Material.GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData Vine(Faces face)
	{
		MultipleFacing data = (MultipleFacing) Material.VINE.createBlockData();
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData GlowLichen(Faces face, boolean waterlogged)
	{
		GlowLichen data = (GlowLichen) Material.GLOW_LICHEN.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData BrickStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.BRICK_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData StoneBrickStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.STONE_BRICK_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MudBrickStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.MUD_BRICK_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData Mycelium(boolean snowy)
	{
		Snowable data = (Snowable) Material.MYCELIUM.createBlockData();
		data.setSnowy(snowy);
		return data;
	}

	public static BlockData NetherBrickFence(Faces face, boolean waterlogged)
	{
		Fence data = (Fence) Material.NETHER_BRICK_FENCE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData NetherBrickStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.NETHER_BRICK_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SculkVein(Faces face, boolean waterlogged)
	{
		SculkVein data = (SculkVein) Material.SCULK_VEIN.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData SculkCatalyst(boolean bloom)
	{
		SculkCatalyst data = (SculkCatalyst) Material.SCULK_CATALYST.createBlockData();
		data.setBloom(bloom);
		return data;
	}

	public static BlockData SculkShrieker(boolean canSummon, boolean shrieking, boolean waterlogged)
	{
		SculkShrieker data = (SculkShrieker) Material.SCULK_SHRIEKER.createBlockData();
		data.setCanSummon(canSummon);
		data.setShrieking(shrieking);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData EndPortalFrame(boolean eye, BlockFace facing)
	{
		EndPortalFrame data = (EndPortalFrame) Material.END_PORTAL_FRAME.createBlockData();
		data.setEye(eye);
		data.setFacing(facing);
		return data;
	}

	public static BlockData SandstoneStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.SANDSTONE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData EnderChest(BlockFace facing, boolean waterlogged)
	{
		EnderChest data = (EnderChest) Material.ENDER_CHEST.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData OakStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.OAK_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SpruceStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.SPRUCE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BirchStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.BIRCH_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData JungleStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.JUNGLE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData AcaciaStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.ACACIA_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DarkOakStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.DARK_OAK_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MangroveStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.MANGROVE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData CrimsonStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.CRIMSON_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WarpedStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.WARPED_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData CommandBlock(boolean conditional, BlockFace facing)
	{
		CommandBlock data = (CommandBlock) Material.COMMAND_BLOCK.createBlockData();
		data.setConditional(conditional);
		data.setFacing(facing);
		return data;
	}

	public static BlockData CobblestoneWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.COBBLESTONE_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData MossyCobblestoneWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.MOSSY_COBBLESTONE_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData BrickWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.BRICK_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData PrismarineWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.PRISMARINE_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData RedSandstoneWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.RED_SANDSTONE_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData MossyStoneBrickWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.MOSSY_STONE_BRICK_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData GraniteWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.GRANITE_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData StoneBrickWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.STONE_BRICK_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData MudBrickWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.MUD_BRICK_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData NetherBrickWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.NETHER_BRICK_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData AndesiteWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.ANDESITE_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData RedNetherBrickWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.RED_NETHER_BRICK_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData SandstoneWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.SANDSTONE_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData EndStoneBrickWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.END_STONE_BRICK_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData DioriteWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.DIORITE_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData BlackstoneWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.BLACKSTONE_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData PolishedBlackstoneWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.POLISHED_BLACKSTONE_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData PolishedBlackstoneBrickWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.POLISHED_BLACKSTONE_BRICK_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData CobbledDeepslateWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.COBBLED_DEEPSLATE_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData PolishedDeepslateWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.POLISHED_DEEPSLATE_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData DeepslateBrickWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.DEEPSLATE_BRICK_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData DeepslateTileWall(WallFaces face, boolean up, boolean waterlogged)
	{
		Wall data = (Wall) Material.DEEPSLATE_TILE_WALL.createBlockData();
		data.setUp(up);
		data.setWaterlogged(waterlogged);
face.faces.forEach(data::setHeight);
		return data;
	}

	public static BlockData Anvil(BlockFace facing)
	{
		Directional data = (Directional) Material.ANVIL.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData ChippedAnvil(BlockFace facing)
	{
		Directional data = (Directional) Material.CHIPPED_ANVIL.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData DamagedAnvil(BlockFace facing)
	{
		Directional data = (Directional) Material.DAMAGED_ANVIL.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData QuartzPillar(Axis axis)
	{
		Orientable data = (Orientable) Material.QUARTZ_PILLAR.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData QuartzStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.QUARTZ_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData Light(int level, boolean waterlogged)
	{
		Light data = (Light) Material.LIGHT.createBlockData();
		data.setLevel(level);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData HayBlock(Axis axis)
	{
		Orientable data = (Orientable) Material.HAY_BLOCK.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData Sunflower(Bisected.Half half)
	{
		Bisected data = (Bisected) Material.SUNFLOWER.createBlockData();
		data.setHalf(half);
		return data;
	}

	public static BlockData Lilac(Bisected.Half half)
	{
		Bisected data = (Bisected) Material.LILAC.createBlockData();
		data.setHalf(half);
		return data;
	}

	public static BlockData RoseBush(Bisected.Half half)
	{
		Bisected data = (Bisected) Material.ROSE_BUSH.createBlockData();
		data.setHalf(half);
		return data;
	}

	public static BlockData Peony(Bisected.Half half)
	{
		Bisected data = (Bisected) Material.PEONY.createBlockData();
		data.setHalf(half);
		return data;
	}

	public static BlockData TallGrass(Bisected.Half half)
	{
		Bisected data = (Bisected) Material.TALL_GRASS.createBlockData();
		data.setHalf(half);
		return data;
	}

	public static BlockData LargeFern(Bisected.Half half)
	{
		Bisected data = (Bisected) Material.LARGE_FERN.createBlockData();
		data.setHalf(half);
		return data;
	}

	public static BlockData WhiteStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.WHITE_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData OrangeStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.ORANGE_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData MagentaStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.MAGENTA_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData LightBlueStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.LIGHT_BLUE_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData YellowStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.YELLOW_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData LimeStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.LIME_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData PinkStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.PINK_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData GrayStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.GRAY_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData LightGrayStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.LIGHT_GRAY_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData CyanStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.CYAN_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData PurpleStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.PURPLE_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData BlueStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.BLUE_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData BrownStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.BROWN_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData GreenStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.GREEN_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData RedStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.RED_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData BlackStainedGlassPane(Faces face, boolean waterlogged)
	{
		GlassPane data = (GlassPane) Material.BLACK_STAINED_GLASS_PANE.createBlockData();
		data.setWaterlogged(waterlogged);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData PrismarineStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.PRISMARINE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PrismarineBrickStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.PRISMARINE_BRICK_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DarkPrismarineStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.DARK_PRISMARINE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData RedSandstoneStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.RED_SANDSTONE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData RepeatingCommandBlock(boolean conditional, BlockFace facing)
	{
		CommandBlock data = (CommandBlock) Material.REPEATING_COMMAND_BLOCK.createBlockData();
		data.setConditional(conditional);
		data.setFacing(facing);
		return data;
	}

	public static BlockData ChainCommandBlock(boolean conditional, BlockFace facing)
	{
		CommandBlock data = (CommandBlock) Material.CHAIN_COMMAND_BLOCK.createBlockData();
		data.setConditional(conditional);
		data.setFacing(facing);
		return data;
	}

	public static BlockData BoneBlock(Axis axis)
	{
		Orientable data = (Orientable) Material.BONE_BLOCK.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData ShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData WhiteShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.WHITE_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData OrangeShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.ORANGE_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData MagentaShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.MAGENTA_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData LightBlueShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.LIGHT_BLUE_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData YellowShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.YELLOW_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData LimeShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.LIME_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData PinkShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.PINK_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData GrayShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.GRAY_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData LightGrayShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.LIGHT_GRAY_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData CyanShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.CYAN_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData PurpleShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.PURPLE_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData BlueShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.BLUE_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData BrownShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.BROWN_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData GreenShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.GREEN_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData RedShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.RED_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData BlackShulkerBox(BlockFace facing)
	{
		Directional data = (Directional) Material.BLACK_SHULKER_BOX.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData WhiteGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.WHITE_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData OrangeGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.ORANGE_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData MagentaGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.MAGENTA_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData LightBlueGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.LIGHT_BLUE_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData YellowGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.YELLOW_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData LimeGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.LIME_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData PinkGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.PINK_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData GrayGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.GRAY_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData LightGrayGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.LIGHT_GRAY_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData CyanGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.CYAN_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData PurpleGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.PURPLE_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData BlueGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.BLUE_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData BrownGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.BROWN_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData GreenGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.GREEN_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData RedGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.RED_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData BlackGlazedTerracotta(BlockFace facing)
	{
		Directional data = (Directional) Material.BLACK_GLAZED_TERRACOTTA.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData TurtleEgg(int hatch, int eggs)
	{
		TurtleEgg data = (TurtleEgg) Material.TURTLE_EGG.createBlockData();
		data.setHatch(hatch);
		data.setEggs(eggs);
		return data;
	}

	public static BlockData TubeCoral(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.TUBE_CORAL.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BrainCoral(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.BRAIN_CORAL.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BubbleCoral(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.BUBBLE_CORAL.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData FireCoral(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.FIRE_CORAL.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData HornCoral(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.HORN_CORAL.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeadBrainCoral(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.DEAD_BRAIN_CORAL.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeadBubbleCoral(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.DEAD_BUBBLE_CORAL.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeadFireCoral(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.DEAD_FIRE_CORAL.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeadHornCoral(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.DEAD_HORN_CORAL.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeadTubeCoral(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.DEAD_TUBE_CORAL.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData TubeCoralFan(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.TUBE_CORAL_FAN.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BrainCoralFan(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.BRAIN_CORAL_FAN.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BubbleCoralFan(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.BUBBLE_CORAL_FAN.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData FireCoralFan(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.FIRE_CORAL_FAN.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData HornCoralFan(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.HORN_CORAL_FAN.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeadTubeCoralFan(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.DEAD_TUBE_CORAL_FAN.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeadBrainCoralFan(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.DEAD_BRAIN_CORAL_FAN.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeadBubbleCoralFan(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.DEAD_BUBBLE_CORAL_FAN.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeadFireCoralFan(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.DEAD_FIRE_CORAL_FAN.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeadHornCoralFan(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.DEAD_HORN_CORAL_FAN.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData Conduit(boolean waterlogged)
	{
		Waterlogged data = (Waterlogged) Material.CONDUIT.createBlockData();
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PolishedGraniteStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.POLISHED_GRANITE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SmoothRedSandstoneStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.SMOOTH_RED_SANDSTONE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MossyStoneBrickStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.MOSSY_STONE_BRICK_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PolishedDioriteStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.POLISHED_DIORITE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MossyCobblestoneStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.MOSSY_COBBLESTONE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData EndStoneBrickStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.END_STONE_BRICK_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData StoneStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.STONE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SmoothSandstoneStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.SMOOTH_SANDSTONE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SmoothQuartzStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.SMOOTH_QUARTZ_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData GraniteStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.GRANITE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData AndesiteStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.ANDESITE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData RedNetherBrickStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.RED_NETHER_BRICK_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PolishedAndesiteStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.POLISHED_ANDESITE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DioriteStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.DIORITE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData CobbledDeepslateStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.COBBLED_DEEPSLATE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PolishedDeepslateStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.POLISHED_DEEPSLATE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeepslateBrickStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.DEEPSLATE_BRICK_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeepslateTileStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.DEEPSLATE_TILE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PolishedGraniteSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.POLISHED_GRANITE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SmoothRedSandstoneSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.SMOOTH_RED_SANDSTONE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MossyStoneBrickSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.MOSSY_STONE_BRICK_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PolishedDioriteSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.POLISHED_DIORITE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MossyCobblestoneSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.MOSSY_COBBLESTONE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData EndStoneBrickSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.END_STONE_BRICK_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SmoothSandstoneSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.SMOOTH_SANDSTONE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SmoothQuartzSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.SMOOTH_QUARTZ_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData GraniteSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.GRANITE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData AndesiteSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.ANDESITE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData RedNetherBrickSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.RED_NETHER_BRICK_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PolishedAndesiteSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.POLISHED_ANDESITE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DioriteSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.DIORITE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData CobbledDeepslateSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.COBBLED_DEEPSLATE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PolishedDeepslateSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.POLISHED_DEEPSLATE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeepslateBrickSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.DEEPSLATE_BRICK_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeepslateTileSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.DEEPSLATE_TILE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData Scaffolding(int distance, boolean bottom, boolean waterlogged)
	{
		Scaffolding data = (Scaffolding) Material.SCAFFOLDING.createBlockData();
		data.setDistance(distance);
		data.setBottom(bottom);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData RedstoneTorch(boolean lit)
	{
		Lightable data = (Lightable) Material.REDSTONE_TORCH.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData Repeater(boolean locked, int delay, BlockFace facing, boolean powered)
	{
		Repeater data = (Repeater) Material.REPEATER.createBlockData();
		data.setLocked(locked);
		data.setDelay(delay);
		data.setFacing(facing);
		data.setPowered(powered);
		return data;
	}

	public static BlockData Comparator(Comparator.Mode mode, BlockFace facing, boolean powered)
	{
		Comparator data = (Comparator) Material.COMPARATOR.createBlockData();
		data.setMode(mode);
		data.setFacing(facing);
		data.setPowered(powered);
		return data;
	}

	public static BlockData Piston(boolean extended, BlockFace facing)
	{
		Piston data = (Piston) Material.PISTON.createBlockData();
		data.setExtended(extended);
		data.setFacing(facing);
		return data;
	}

	public static BlockData StickyPiston(boolean extended, BlockFace facing)
	{
		Piston data = (Piston) Material.STICKY_PISTON.createBlockData();
		data.setExtended(extended);
		data.setFacing(facing);
		return data;
	}

	public static BlockData Observer(BlockFace facing, boolean powered)
	{
		Observer data = (Observer) Material.OBSERVER.createBlockData();
		data.setFacing(facing);
		data.setPowered(powered);
		return data;
	}

	public static BlockData Hopper(boolean enabled, BlockFace facing)
	{
		Hopper data = (Hopper) Material.HOPPER.createBlockData();
		data.setEnabled(enabled);
		data.setFacing(facing);
		return data;
	}

	public static BlockData Dispenser(boolean triggered, BlockFace facing)
	{
		Dispenser data = (Dispenser) Material.DISPENSER.createBlockData();
		data.setTriggered(triggered);
		data.setFacing(facing);
		return data;
	}

	public static BlockData Dropper(boolean triggered, BlockFace facing)
	{
		Dispenser data = (Dispenser) Material.DROPPER.createBlockData();
		data.setTriggered(triggered);
		data.setFacing(facing);
		return data;
	}

	public static BlockData Lectern(BlockFace facing, boolean powered)
	{
		Lectern data = (Lectern) Material.LECTERN.createBlockData();
		data.setFacing(facing);
		data.setPowered(powered);
		return data;
	}

	public static BlockData Target(int power)
	{
		AnaloguePowerable data = (AnaloguePowerable) Material.TARGET.createBlockData();
		data.setPower(power);
		return data;
	}

	public static BlockData Lever(BlockFace facing, FaceAttachable.AttachedFace attachedFace, boolean powered)
	{
		Switch data = (Switch) Material.LEVER.createBlockData();
		data.setFacing(facing);
		data.setAttachedFace(attachedFace);
		data.setPowered(powered);
		return data;
	}

	public static BlockData LightningRod(BlockFace facing, boolean powered, boolean waterlogged)
	{
		LightningRod data = (LightningRod) Material.LIGHTNING_ROD.createBlockData();
		data.setFacing(facing);
		data.setPowered(powered);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DaylightDetector(boolean inverted, int power)
	{
		DaylightDetector data = (DaylightDetector) Material.DAYLIGHT_DETECTOR.createBlockData();
		data.setInverted(inverted);
		data.setPower(power);
		return data;
	}

	public static BlockData SculkSensor(SculkSensor.Phase phase, int power, boolean waterlogged)
	{
		SculkSensor data = (SculkSensor) Material.SCULK_SENSOR.createBlockData();
		data.setPhase(phase);
		data.setPower(power);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData TripwireHook(boolean attached, BlockFace facing, boolean powered)
	{
		TripwireHook data = (TripwireHook) Material.TRIPWIRE_HOOK.createBlockData();
		data.setAttached(attached);
		data.setFacing(facing);
		data.setPowered(powered);
		return data;
	}

	public static BlockData TrappedChest(Chest.Type type, BlockFace facing, boolean waterlogged)
	{
		Chest data = (Chest) Material.TRAPPED_CHEST.createBlockData();
		data.setType(type);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData Tnt(boolean unstable)
	{
		TNT data = (TNT) Material.TNT.createBlockData();
		data.setUnstable(unstable);
		return data;
	}

	public static BlockData RedstoneLamp(boolean lit)
	{
		Lightable data = (Lightable) Material.REDSTONE_LAMP.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData NoteBlock(Instrument instrument, Note note, boolean powered)
	{
		NoteBlock data = (NoteBlock) Material.NOTE_BLOCK.createBlockData();
		data.setInstrument(instrument);
		data.setNote(note);
		data.setPowered(powered);
		return data;
	}

	public static BlockData StoneButton(BlockFace facing, FaceAttachable.AttachedFace attachedFace, boolean powered)
	{
		Switch data = (Switch) Material.STONE_BUTTON.createBlockData();
		data.setFacing(facing);
		data.setAttachedFace(attachedFace);
		data.setPowered(powered);
		return data;
	}

	public static BlockData PolishedBlackstoneButton(BlockFace facing, FaceAttachable.AttachedFace attachedFace, boolean powered)
	{
		Switch data = (Switch) Material.POLISHED_BLACKSTONE_BUTTON.createBlockData();
		data.setFacing(facing);
		data.setAttachedFace(attachedFace);
		data.setPowered(powered);
		return data;
	}

	public static BlockData OakButton(BlockFace facing, FaceAttachable.AttachedFace attachedFace, boolean powered)
	{
		Switch data = (Switch) Material.OAK_BUTTON.createBlockData();
		data.setFacing(facing);
		data.setAttachedFace(attachedFace);
		data.setPowered(powered);
		return data;
	}

	public static BlockData SpruceButton(BlockFace facing, FaceAttachable.AttachedFace attachedFace, boolean powered)
	{
		Switch data = (Switch) Material.SPRUCE_BUTTON.createBlockData();
		data.setFacing(facing);
		data.setAttachedFace(attachedFace);
		data.setPowered(powered);
		return data;
	}

	public static BlockData BirchButton(BlockFace facing, FaceAttachable.AttachedFace attachedFace, boolean powered)
	{
		Switch data = (Switch) Material.BIRCH_BUTTON.createBlockData();
		data.setFacing(facing);
		data.setAttachedFace(attachedFace);
		data.setPowered(powered);
		return data;
	}

	public static BlockData JungleButton(BlockFace facing, FaceAttachable.AttachedFace attachedFace, boolean powered)
	{
		Switch data = (Switch) Material.JUNGLE_BUTTON.createBlockData();
		data.setFacing(facing);
		data.setAttachedFace(attachedFace);
		data.setPowered(powered);
		return data;
	}

	public static BlockData AcaciaButton(BlockFace facing, FaceAttachable.AttachedFace attachedFace, boolean powered)
	{
		Switch data = (Switch) Material.ACACIA_BUTTON.createBlockData();
		data.setFacing(facing);
		data.setAttachedFace(attachedFace);
		data.setPowered(powered);
		return data;
	}

	public static BlockData DarkOakButton(BlockFace facing, FaceAttachable.AttachedFace attachedFace, boolean powered)
	{
		Switch data = (Switch) Material.DARK_OAK_BUTTON.createBlockData();
		data.setFacing(facing);
		data.setAttachedFace(attachedFace);
		data.setPowered(powered);
		return data;
	}

	public static BlockData MangroveButton(BlockFace facing, FaceAttachable.AttachedFace attachedFace, boolean powered)
	{
		Switch data = (Switch) Material.MANGROVE_BUTTON.createBlockData();
		data.setFacing(facing);
		data.setAttachedFace(attachedFace);
		data.setPowered(powered);
		return data;
	}

	public static BlockData CrimsonButton(BlockFace facing, FaceAttachable.AttachedFace attachedFace, boolean powered)
	{
		Switch data = (Switch) Material.CRIMSON_BUTTON.createBlockData();
		data.setFacing(facing);
		data.setAttachedFace(attachedFace);
		data.setPowered(powered);
		return data;
	}

	public static BlockData WarpedButton(BlockFace facing, FaceAttachable.AttachedFace attachedFace, boolean powered)
	{
		Switch data = (Switch) Material.WARPED_BUTTON.createBlockData();
		data.setFacing(facing);
		data.setAttachedFace(attachedFace);
		data.setPowered(powered);
		return data;
	}

	public static BlockData StonePressurePlate(boolean powered)
	{
		Powerable data = (Powerable) Material.STONE_PRESSURE_PLATE.createBlockData();
		data.setPowered(powered);
		return data;
	}

	public static BlockData PolishedBlackstonePressurePlate(boolean powered)
	{
		Powerable data = (Powerable) Material.POLISHED_BLACKSTONE_PRESSURE_PLATE.createBlockData();
		data.setPowered(powered);
		return data;
	}

	public static BlockData LightWeightedPressurePlate(int power)
	{
		AnaloguePowerable data = (AnaloguePowerable) Material.LIGHT_WEIGHTED_PRESSURE_PLATE.createBlockData();
		data.setPower(power);
		return data;
	}

	public static BlockData HeavyWeightedPressurePlate(int power)
	{
		AnaloguePowerable data = (AnaloguePowerable) Material.HEAVY_WEIGHTED_PRESSURE_PLATE.createBlockData();
		data.setPower(power);
		return data;
	}

	public static BlockData OakPressurePlate(boolean powered)
	{
		Powerable data = (Powerable) Material.OAK_PRESSURE_PLATE.createBlockData();
		data.setPowered(powered);
		return data;
	}

	public static BlockData SprucePressurePlate(boolean powered)
	{
		Powerable data = (Powerable) Material.SPRUCE_PRESSURE_PLATE.createBlockData();
		data.setPowered(powered);
		return data;
	}

	public static BlockData BirchPressurePlate(boolean powered)
	{
		Powerable data = (Powerable) Material.BIRCH_PRESSURE_PLATE.createBlockData();
		data.setPowered(powered);
		return data;
	}

	public static BlockData JunglePressurePlate(boolean powered)
	{
		Powerable data = (Powerable) Material.JUNGLE_PRESSURE_PLATE.createBlockData();
		data.setPowered(powered);
		return data;
	}

	public static BlockData AcaciaPressurePlate(boolean powered)
	{
		Powerable data = (Powerable) Material.ACACIA_PRESSURE_PLATE.createBlockData();
		data.setPowered(powered);
		return data;
	}

	public static BlockData DarkOakPressurePlate(boolean powered)
	{
		Powerable data = (Powerable) Material.DARK_OAK_PRESSURE_PLATE.createBlockData();
		data.setPowered(powered);
		return data;
	}

	public static BlockData MangrovePressurePlate(boolean powered)
	{
		Powerable data = (Powerable) Material.MANGROVE_PRESSURE_PLATE.createBlockData();
		data.setPowered(powered);
		return data;
	}

	public static BlockData CrimsonPressurePlate(boolean powered)
	{
		Powerable data = (Powerable) Material.CRIMSON_PRESSURE_PLATE.createBlockData();
		data.setPowered(powered);
		return data;
	}

	public static BlockData WarpedPressurePlate(boolean powered)
	{
		Powerable data = (Powerable) Material.WARPED_PRESSURE_PLATE.createBlockData();
		data.setPowered(powered);
		return data;
	}

	public static BlockData IronDoor(Door.Hinge hinge, Bisected.Half half, BlockFace facing, boolean open, boolean powered)
	{
		Door data = (Door) Material.IRON_DOOR.createBlockData();
		data.setHinge(hinge);
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData OakDoor(Door.Hinge hinge, Bisected.Half half, BlockFace facing, boolean open, boolean powered)
	{
		Door data = (Door) Material.OAK_DOOR.createBlockData();
		data.setHinge(hinge);
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData SpruceDoor(Door.Hinge hinge, Bisected.Half half, BlockFace facing, boolean open, boolean powered)
	{
		Door data = (Door) Material.SPRUCE_DOOR.createBlockData();
		data.setHinge(hinge);
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData BirchDoor(Door.Hinge hinge, Bisected.Half half, BlockFace facing, boolean open, boolean powered)
	{
		Door data = (Door) Material.BIRCH_DOOR.createBlockData();
		data.setHinge(hinge);
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData JungleDoor(Door.Hinge hinge, Bisected.Half half, BlockFace facing, boolean open, boolean powered)
	{
		Door data = (Door) Material.JUNGLE_DOOR.createBlockData();
		data.setHinge(hinge);
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData AcaciaDoor(Door.Hinge hinge, Bisected.Half half, BlockFace facing, boolean open, boolean powered)
	{
		Door data = (Door) Material.ACACIA_DOOR.createBlockData();
		data.setHinge(hinge);
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData DarkOakDoor(Door.Hinge hinge, Bisected.Half half, BlockFace facing, boolean open, boolean powered)
	{
		Door data = (Door) Material.DARK_OAK_DOOR.createBlockData();
		data.setHinge(hinge);
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData MangroveDoor(Door.Hinge hinge, Bisected.Half half, BlockFace facing, boolean open, boolean powered)
	{
		Door data = (Door) Material.MANGROVE_DOOR.createBlockData();
		data.setHinge(hinge);
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData CrimsonDoor(Door.Hinge hinge, Bisected.Half half, BlockFace facing, boolean open, boolean powered)
	{
		Door data = (Door) Material.CRIMSON_DOOR.createBlockData();
		data.setHinge(hinge);
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData WarpedDoor(Door.Hinge hinge, Bisected.Half half, BlockFace facing, boolean open, boolean powered)
	{
		Door data = (Door) Material.WARPED_DOOR.createBlockData();
		data.setHinge(hinge);
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData IronTrapdoor(Bisected.Half half, BlockFace facing, boolean open, boolean powered, boolean waterlogged)
	{
		TrapDoor data = (TrapDoor) Material.IRON_TRAPDOOR.createBlockData();
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData OakTrapdoor(Bisected.Half half, BlockFace facing, boolean open, boolean powered, boolean waterlogged)
	{
		TrapDoor data = (TrapDoor) Material.OAK_TRAPDOOR.createBlockData();
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SpruceTrapdoor(Bisected.Half half, BlockFace facing, boolean open, boolean powered, boolean waterlogged)
	{
		TrapDoor data = (TrapDoor) Material.SPRUCE_TRAPDOOR.createBlockData();
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BirchTrapdoor(Bisected.Half half, BlockFace facing, boolean open, boolean powered, boolean waterlogged)
	{
		TrapDoor data = (TrapDoor) Material.BIRCH_TRAPDOOR.createBlockData();
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData JungleTrapdoor(Bisected.Half half, BlockFace facing, boolean open, boolean powered, boolean waterlogged)
	{
		TrapDoor data = (TrapDoor) Material.JUNGLE_TRAPDOOR.createBlockData();
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData AcaciaTrapdoor(Bisected.Half half, BlockFace facing, boolean open, boolean powered, boolean waterlogged)
	{
		TrapDoor data = (TrapDoor) Material.ACACIA_TRAPDOOR.createBlockData();
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DarkOakTrapdoor(Bisected.Half half, BlockFace facing, boolean open, boolean powered, boolean waterlogged)
	{
		TrapDoor data = (TrapDoor) Material.DARK_OAK_TRAPDOOR.createBlockData();
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MangroveTrapdoor(Bisected.Half half, BlockFace facing, boolean open, boolean powered, boolean waterlogged)
	{
		TrapDoor data = (TrapDoor) Material.MANGROVE_TRAPDOOR.createBlockData();
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData CrimsonTrapdoor(Bisected.Half half, BlockFace facing, boolean open, boolean powered, boolean waterlogged)
	{
		TrapDoor data = (TrapDoor) Material.CRIMSON_TRAPDOOR.createBlockData();
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WarpedTrapdoor(Bisected.Half half, BlockFace facing, boolean open, boolean powered, boolean waterlogged)
	{
		TrapDoor data = (TrapDoor) Material.WARPED_TRAPDOOR.createBlockData();
		data.setHalf(half);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData OakFenceGate(boolean inWall, BlockFace facing, boolean open, boolean powered)
	{
		Gate data = (Gate) Material.OAK_FENCE_GATE.createBlockData();
		data.setInWall(inWall);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData SpruceFenceGate(boolean inWall, BlockFace facing, boolean open, boolean powered)
	{
		Gate data = (Gate) Material.SPRUCE_FENCE_GATE.createBlockData();
		data.setInWall(inWall);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData BirchFenceGate(boolean inWall, BlockFace facing, boolean open, boolean powered)
	{
		Gate data = (Gate) Material.BIRCH_FENCE_GATE.createBlockData();
		data.setInWall(inWall);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData JungleFenceGate(boolean inWall, BlockFace facing, boolean open, boolean powered)
	{
		Gate data = (Gate) Material.JUNGLE_FENCE_GATE.createBlockData();
		data.setInWall(inWall);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData AcaciaFenceGate(boolean inWall, BlockFace facing, boolean open, boolean powered)
	{
		Gate data = (Gate) Material.ACACIA_FENCE_GATE.createBlockData();
		data.setInWall(inWall);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData DarkOakFenceGate(boolean inWall, BlockFace facing, boolean open, boolean powered)
	{
		Gate data = (Gate) Material.DARK_OAK_FENCE_GATE.createBlockData();
		data.setInWall(inWall);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData MangroveFenceGate(boolean inWall, BlockFace facing, boolean open, boolean powered)
	{
		Gate data = (Gate) Material.MANGROVE_FENCE_GATE.createBlockData();
		data.setInWall(inWall);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData CrimsonFenceGate(boolean inWall, BlockFace facing, boolean open, boolean powered)
	{
		Gate data = (Gate) Material.CRIMSON_FENCE_GATE.createBlockData();
		data.setInWall(inWall);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData WarpedFenceGate(boolean inWall, BlockFace facing, boolean open, boolean powered)
	{
		Gate data = (Gate) Material.WARPED_FENCE_GATE.createBlockData();
		data.setInWall(inWall);
		data.setFacing(facing);
		data.setOpen(open);
		data.setPowered(powered);
		return data;
	}

	public static BlockData PoweredRail(boolean powered, Rail.Shape shape, boolean waterlogged)
	{
		RedstoneRail data = (RedstoneRail) Material.POWERED_RAIL.createBlockData();
		data.setPowered(powered);
		data.setShape(shape);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DetectorRail(boolean powered, Rail.Shape shape, boolean waterlogged)
	{
		RedstoneRail data = (RedstoneRail) Material.DETECTOR_RAIL.createBlockData();
		data.setPowered(powered);
		data.setShape(shape);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData Rail(Rail.Shape shape, boolean waterlogged)
	{
		Rail data = (Rail) Material.RAIL.createBlockData();
		data.setShape(shape);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData ActivatorRail(boolean powered, Rail.Shape shape, boolean waterlogged)
	{
		RedstoneRail data = (RedstoneRail) Material.ACTIVATOR_RAIL.createBlockData();
		data.setPowered(powered);
		data.setShape(shape);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData StructureBlock(StructureBlock.Mode mode)
	{
		StructureBlock data = (StructureBlock) Material.STRUCTURE_BLOCK.createBlockData();
		data.setMode(mode);
		return data;
	}

	public static BlockData Jigsaw(Jigsaw.Orientation orientation)
	{
		Jigsaw data = (Jigsaw) Material.JIGSAW.createBlockData();
		data.setOrientation(orientation);
		return data;
	}

	public static BlockData Wheat(int age)
	{
		Ageable data = (Ageable) Material.WHEAT.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData OakSign(BlockFace rotation, boolean waterlogged)
	{
		Sign data = (Sign) Material.OAK_SIGN.createBlockData();
		data.setRotation(rotation);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SpruceSign(BlockFace rotation, boolean waterlogged)
	{
		Sign data = (Sign) Material.SPRUCE_SIGN.createBlockData();
		data.setRotation(rotation);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BirchSign(BlockFace rotation, boolean waterlogged)
	{
		Sign data = (Sign) Material.BIRCH_SIGN.createBlockData();
		data.setRotation(rotation);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData JungleSign(BlockFace rotation, boolean waterlogged)
	{
		Sign data = (Sign) Material.JUNGLE_SIGN.createBlockData();
		data.setRotation(rotation);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData AcaciaSign(BlockFace rotation, boolean waterlogged)
	{
		Sign data = (Sign) Material.ACACIA_SIGN.createBlockData();
		data.setRotation(rotation);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DarkOakSign(BlockFace rotation, boolean waterlogged)
	{
		Sign data = (Sign) Material.DARK_OAK_SIGN.createBlockData();
		data.setRotation(rotation);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MangroveSign(BlockFace rotation, boolean waterlogged)
	{
		Sign data = (Sign) Material.MANGROVE_SIGN.createBlockData();
		data.setRotation(rotation);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData CrimsonSign(BlockFace rotation, boolean waterlogged)
	{
		Sign data = (Sign) Material.CRIMSON_SIGN.createBlockData();
		data.setRotation(rotation);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WarpedSign(BlockFace rotation, boolean waterlogged)
	{
		Sign data = (Sign) Material.WARPED_SIGN.createBlockData();
		data.setRotation(rotation);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData Cake(int bites)
	{
		Cake data = (Cake) Material.CAKE.createBlockData();
		data.setBites(bites);
		return data;
	}

	public static BlockData WhiteBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.WHITE_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData OrangeBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.ORANGE_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData MagentaBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.MAGENTA_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData LightBlueBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.LIGHT_BLUE_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData YellowBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.YELLOW_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData LimeBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.LIME_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData PinkBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.PINK_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData GrayBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.GRAY_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData LightGrayBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.LIGHT_GRAY_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData CyanBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.CYAN_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData PurpleBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.PURPLE_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData BlueBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.BLUE_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData BrownBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.BROWN_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData GreenBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.GREEN_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData RedBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.RED_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData BlackBed(Bed.Part part, BlockFace facing)
	{
		Bed data = (Bed) Material.BLACK_BED.createBlockData();
		data.setPart(part);
		data.setFacing(facing);
		return data;
	}

	public static BlockData NetherWart(int age)
	{
		Ageable data = (Ageable) Material.NETHER_WART.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData BrewingStand(boolean bottle0, boolean bottle1, boolean bottle2)
	{
		BrewingStand data = (BrewingStand) Material.BREWING_STAND.createBlockData();
		data.setBottle(0, bottle0);
		data.setBottle(1, bottle1);
		data.setBottle(2, bottle2);
		return data;
	}

	public static BlockData SkeletonSkull(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.SKELETON_SKULL.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData WitherSkeletonSkull(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.WITHER_SKELETON_SKULL.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData PlayerHead(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.PLAYER_HEAD.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData ZombieHead(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.ZOMBIE_HEAD.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData CreeperHead(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.CREEPER_HEAD.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData DragonHead(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.DRAGON_HEAD.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData WhiteBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.WHITE_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData OrangeBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.ORANGE_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData MagentaBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.MAGENTA_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData LightBlueBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.LIGHT_BLUE_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData YellowBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.YELLOW_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData LimeBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.LIME_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData PinkBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.PINK_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData GrayBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.GRAY_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData LightGrayBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.LIGHT_GRAY_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData CyanBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.CYAN_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData PurpleBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.PURPLE_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData BlueBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.BLUE_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData BrownBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.BROWN_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData GreenBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.GREEN_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData RedBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.RED_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData BlackBanner(BlockFace rotation)
	{
		Rotatable data = (Rotatable) Material.BLACK_BANNER.createBlockData();
		data.setRotation(rotation);
		return data;
	}

	public static BlockData Loom(BlockFace facing)
	{
		Directional data = (Directional) Material.LOOM.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData Composter(int level)
	{
		Levelled data = (Levelled) Material.COMPOSTER.createBlockData();
		data.setLevel(level);
		return data;
	}

	public static BlockData Barrel(BlockFace facing, boolean open)
	{
		Barrel data = (Barrel) Material.BARREL.createBlockData();
		data.setFacing(facing);
		data.setOpen(open);
		return data;
	}

	public static BlockData Smoker(BlockFace facing, boolean lit)
	{
		Furnace data = (Furnace) Material.SMOKER.createBlockData();
		data.setFacing(facing);
		data.setLit(lit);
		return data;
	}

	public static BlockData BlastFurnace(BlockFace facing, boolean lit)
	{
		Furnace data = (Furnace) Material.BLAST_FURNACE.createBlockData();
		data.setFacing(facing);
		data.setLit(lit);
		return data;
	}

	public static BlockData Grindstone(BlockFace facing, FaceAttachable.AttachedFace attachedFace)
	{
		Grindstone data = (Grindstone) Material.GRINDSTONE.createBlockData();
		data.setFacing(facing);
		data.setAttachedFace(attachedFace);
		return data;
	}

	public static BlockData Stonecutter(BlockFace facing)
	{
		Directional data = (Directional) Material.STONECUTTER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData Bell(Bell.Attachment attachment, BlockFace facing, boolean powered)
	{
		Bell data = (Bell) Material.BELL.createBlockData();
		data.setAttachment(attachment);
		data.setFacing(facing);
		data.setPowered(powered);
		return data;
	}

	public static BlockData Lantern(boolean hanging, boolean waterlogged)
	{
		Lantern data = (Lantern) Material.LANTERN.createBlockData();
		data.setHanging(hanging);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SoulLantern(boolean hanging, boolean waterlogged)
	{
		Lantern data = (Lantern) Material.SOUL_LANTERN.createBlockData();
		data.setHanging(hanging);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData Campfire(boolean signalFire, BlockFace facing, boolean lit, boolean waterlogged)
	{
		Campfire data = (Campfire) Material.CAMPFIRE.createBlockData();
		data.setSignalFire(signalFire);
		data.setFacing(facing);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SoulCampfire(boolean signalFire, BlockFace facing, boolean lit, boolean waterlogged)
	{
		Campfire data = (Campfire) Material.SOUL_CAMPFIRE.createBlockData();
		data.setSignalFire(signalFire);
		data.setFacing(facing);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BeeNest(int honeyLevel, BlockFace facing)
	{
		Beehive data = (Beehive) Material.BEE_NEST.createBlockData();
		data.setHoneyLevel(honeyLevel);
		data.setFacing(facing);
		return data;
	}

	public static BlockData Beehive(int honeyLevel, BlockFace facing)
	{
		Beehive data = (Beehive) Material.BEEHIVE.createBlockData();
		data.setHoneyLevel(honeyLevel);
		data.setFacing(facing);
		return data;
	}

	public static BlockData BlackstoneSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.BLACKSTONE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BlackstoneStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.BLACKSTONE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PolishedBlackstoneSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.POLISHED_BLACKSTONE_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PolishedBlackstoneStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.POLISHED_BLACKSTONE_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PolishedBlackstoneBrickSlab(Slab.Type type, boolean waterlogged)
	{
		Slab data = (Slab) Material.POLISHED_BLACKSTONE_BRICK_SLAB.createBlockData();
		data.setType(type);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PolishedBlackstoneBrickStairs(Stairs.Shape shape, Bisected.Half half, BlockFace facing, boolean waterlogged)
	{
		Stairs data = (Stairs) Material.POLISHED_BLACKSTONE_BRICK_STAIRS.createBlockData();
		data.setShape(shape);
		data.setHalf(half);
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData RespawnAnchor(int charges)
	{
		RespawnAnchor data = (RespawnAnchor) Material.RESPAWN_ANCHOR.createBlockData();
		data.setCharges(charges);
		return data;
	}

	public static BlockData Candle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WhiteCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.WHITE_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData OrangeCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.ORANGE_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MagentaCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.MAGENTA_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData LightBlueCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.LIGHT_BLUE_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData YellowCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.YELLOW_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData LimeCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.LIME_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PinkCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.PINK_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData GrayCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.GRAY_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData LightGrayCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.LIGHT_GRAY_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData CyanCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.CYAN_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PurpleCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.PURPLE_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BlueCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.BLUE_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BrownCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.BROWN_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData GreenCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.GREEN_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData RedCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.RED_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BlackCandle(int candles, boolean lit, boolean waterlogged)
	{
		Candle data = (Candle) Material.BLACK_CANDLE.createBlockData();
		data.setCandles(candles);
		data.setLit(lit);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SmallAmethystBud(BlockFace facing, boolean waterlogged)
	{
		AmethystCluster data = (AmethystCluster) Material.SMALL_AMETHYST_BUD.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MediumAmethystBud(BlockFace facing, boolean waterlogged)
	{
		AmethystCluster data = (AmethystCluster) Material.MEDIUM_AMETHYST_BUD.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData LargeAmethystBud(BlockFace facing, boolean waterlogged)
	{
		AmethystCluster data = (AmethystCluster) Material.LARGE_AMETHYST_BUD.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData AmethystCluster(BlockFace facing, boolean waterlogged)
	{
		AmethystCluster data = (AmethystCluster) Material.AMETHYST_CLUSTER.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData PointedDripstone(BlockFace verticalDirection, PointedDripstone.Thickness thickness, boolean waterlogged)
	{
		PointedDripstone data = (PointedDripstone) Material.POINTED_DRIPSTONE.createBlockData();
		data.setVerticalDirection(verticalDirection);
		data.setThickness(thickness);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData OchreFroglight(Axis axis)
	{
		Orientable data = (Orientable) Material.OCHRE_FROGLIGHT.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData VerdantFroglight(Axis axis)
	{
		Orientable data = (Orientable) Material.VERDANT_FROGLIGHT.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData PearlescentFroglight(Axis axis)
	{
		Orientable data = (Orientable) Material.PEARLESCENT_FROGLIGHT.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData Water(int level)
	{
		Levelled data = (Levelled) Material.WATER.createBlockData();
		data.setLevel(level);
		return data;
	}

	public static BlockData Lava(int level)
	{
		Levelled data = (Levelled) Material.LAVA.createBlockData();
		data.setLevel(level);
		return data;
	}

	public static BlockData TallSeagrass(Bisected.Half half)
	{
		Bisected data = (Bisected) Material.TALL_SEAGRASS.createBlockData();
		data.setHalf(half);
		return data;
	}

	public static BlockData PistonHead(boolean _short, TechnicalPiston.Type type, BlockFace facing)
	{
		PistonHead data = (PistonHead) Material.PISTON_HEAD.createBlockData();
		data.setShort(_short);
		data.setType(type);
		data.setFacing(facing);
		return data;
	}

	public static BlockData MovingPiston(TechnicalPiston.Type type, BlockFace facing)
	{
		TechnicalPiston data = (TechnicalPiston) Material.MOVING_PISTON.createBlockData();
		data.setType(type);
		data.setFacing(facing);
		return data;
	}

	public static BlockData WallTorch(BlockFace facing)
	{
		Directional data = (Directional) Material.WALL_TORCH.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData Fire(int age, Faces face)
	{
		Fire data = (Fire) Material.FIRE.createBlockData();
		data.setAge(age);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData RedstoneWire(RedFaces face, int power)
	{
		RedstoneWire data = (RedstoneWire) Material.REDSTONE_WIRE.createBlockData();
		data.setPower(power);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData OakWallSign(BlockFace facing, boolean waterlogged)
	{
		WallSign data = (WallSign) Material.OAK_WALL_SIGN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData SpruceWallSign(BlockFace facing, boolean waterlogged)
	{
		WallSign data = (WallSign) Material.SPRUCE_WALL_SIGN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BirchWallSign(BlockFace facing, boolean waterlogged)
	{
		WallSign data = (WallSign) Material.BIRCH_WALL_SIGN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData AcaciaWallSign(BlockFace facing, boolean waterlogged)
	{
		WallSign data = (WallSign) Material.ACACIA_WALL_SIGN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData JungleWallSign(BlockFace facing, boolean waterlogged)
	{
		WallSign data = (WallSign) Material.JUNGLE_WALL_SIGN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DarkOakWallSign(BlockFace facing, boolean waterlogged)
	{
		WallSign data = (WallSign) Material.DARK_OAK_WALL_SIGN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData MangroveWallSign(BlockFace facing, boolean waterlogged)
	{
		WallSign data = (WallSign) Material.MANGROVE_WALL_SIGN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData RedstoneWallTorch(BlockFace facing, boolean lit)
	{
		RedstoneWallTorch data = (RedstoneWallTorch) Material.REDSTONE_WALL_TORCH.createBlockData();
		data.setFacing(facing);
		data.setLit(lit);
		return data;
	}

	public static BlockData SoulWallTorch(BlockFace facing)
	{
		Directional data = (Directional) Material.SOUL_WALL_TORCH.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData NetherPortal(Axis axis)
	{
		Orientable data = (Orientable) Material.NETHER_PORTAL.createBlockData();
		data.setAxis(axis);
		return data;
	}

	public static BlockData AttachedPumpkinStem(BlockFace facing)
	{
		Directional data = (Directional) Material.ATTACHED_PUMPKIN_STEM.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData AttachedMelonStem(BlockFace facing)
	{
		Directional data = (Directional) Material.ATTACHED_MELON_STEM.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData PumpkinStem(int age)
	{
		Ageable data = (Ageable) Material.PUMPKIN_STEM.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData MelonStem(int age)
	{
		Ageable data = (Ageable) Material.MELON_STEM.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData WaterCauldron(int level)
	{
		Levelled data = (Levelled) Material.WATER_CAULDRON.createBlockData();
		data.setLevel(level);
		return data;
	}

	public static BlockData PowderSnowCauldron(int level)
	{
		Levelled data = (Levelled) Material.POWDER_SNOW_CAULDRON.createBlockData();
		data.setLevel(level);
		return data;
	}

	public static BlockData Cocoa(int age, BlockFace facing)
	{
		Cocoa data = (Cocoa) Material.COCOA.createBlockData();
		data.setAge(age);
		data.setFacing(facing);
		return data;
	}

	public static BlockData Tripwire(boolean disarmed, boolean attached, Faces face, boolean powered)
	{
		Tripwire data = (Tripwire) Material.TRIPWIRE.createBlockData();
		data.setDisarmed(disarmed);
		data.setAttached(attached);
		data.setPowered(powered);
		face.faces.forEach((f, b) -> {
			if (!data.getAllowedFaces().contains(f))
			{
				throw new RuntimeException("Tried to set non-allowed face!");
			}

			data.setFace(f, b);
		});
		return data;
	}

	public static BlockData Carrots(int age)
	{
		Ageable data = (Ageable) Material.CARROTS.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData Potatoes(int age)
	{
		Ageable data = (Ageable) Material.POTATOES.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData SkeletonWallSkull(BlockFace facing)
	{
		Directional data = (Directional) Material.SKELETON_WALL_SKULL.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData WitherSkeletonWallSkull(BlockFace facing)
	{
		Directional data = (Directional) Material.WITHER_SKELETON_WALL_SKULL.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData ZombieWallHead(BlockFace facing)
	{
		Directional data = (Directional) Material.ZOMBIE_WALL_HEAD.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData PlayerWallHead(BlockFace facing)
	{
		Directional data = (Directional) Material.PLAYER_WALL_HEAD.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData CreeperWallHead(BlockFace facing)
	{
		Directional data = (Directional) Material.CREEPER_WALL_HEAD.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData DragonWallHead(BlockFace facing)
	{
		Directional data = (Directional) Material.DRAGON_WALL_HEAD.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData WhiteWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.WHITE_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData OrangeWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.ORANGE_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData MagentaWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.MAGENTA_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData LightBlueWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.LIGHT_BLUE_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData YellowWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.YELLOW_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData LimeWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.LIME_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData PinkWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.PINK_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData GrayWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.GRAY_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData LightGrayWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.LIGHT_GRAY_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData CyanWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.CYAN_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData PurpleWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.PURPLE_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData BlueWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.BLUE_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData BrownWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.BROWN_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData GreenWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.GREEN_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData RedWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.RED_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData BlackWallBanner(BlockFace facing)
	{
		Directional data = (Directional) Material.BLACK_WALL_BANNER.createBlockData();
		data.setFacing(facing);
		return data;
	}

	public static BlockData Beetroots(int age)
	{
		Ageable data = (Ageable) Material.BEETROOTS.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData FrostedIce(int age)
	{
		Ageable data = (Ageable) Material.FROSTED_ICE.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData DeadTubeCoralWallFan(BlockFace facing, boolean waterlogged)
	{
		CoralWallFan data = (CoralWallFan) Material.DEAD_TUBE_CORAL_WALL_FAN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeadBrainCoralWallFan(BlockFace facing, boolean waterlogged)
	{
		CoralWallFan data = (CoralWallFan) Material.DEAD_BRAIN_CORAL_WALL_FAN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeadBubbleCoralWallFan(BlockFace facing, boolean waterlogged)
	{
		CoralWallFan data = (CoralWallFan) Material.DEAD_BUBBLE_CORAL_WALL_FAN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeadFireCoralWallFan(BlockFace facing, boolean waterlogged)
	{
		CoralWallFan data = (CoralWallFan) Material.DEAD_FIRE_CORAL_WALL_FAN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData DeadHornCoralWallFan(BlockFace facing, boolean waterlogged)
	{
		CoralWallFan data = (CoralWallFan) Material.DEAD_HORN_CORAL_WALL_FAN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData TubeCoralWallFan(BlockFace facing, boolean waterlogged)
	{
		CoralWallFan data = (CoralWallFan) Material.TUBE_CORAL_WALL_FAN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BrainCoralWallFan(BlockFace facing, boolean waterlogged)
	{
		CoralWallFan data = (CoralWallFan) Material.BRAIN_CORAL_WALL_FAN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BubbleCoralWallFan(BlockFace facing, boolean waterlogged)
	{
		CoralWallFan data = (CoralWallFan) Material.BUBBLE_CORAL_WALL_FAN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData FireCoralWallFan(BlockFace facing, boolean waterlogged)
	{
		CoralWallFan data = (CoralWallFan) Material.FIRE_CORAL_WALL_FAN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData HornCoralWallFan(BlockFace facing, boolean waterlogged)
	{
		CoralWallFan data = (CoralWallFan) Material.HORN_CORAL_WALL_FAN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData BubbleColumn(boolean drag)
	{
		BubbleColumn data = (BubbleColumn) Material.BUBBLE_COLUMN.createBlockData();
		data.setDrag(drag);
		return data;
	}

	public static BlockData SweetBerryBush(int age)
	{
		Ageable data = (Ageable) Material.SWEET_BERRY_BUSH.createBlockData();
		data.setAge(age);
		return data;
	}

	public static BlockData CrimsonWallSign(BlockFace facing, boolean waterlogged)
	{
		WallSign data = (WallSign) Material.CRIMSON_WALL_SIGN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData WarpedWallSign(BlockFace facing, boolean waterlogged)
	{
		WallSign data = (WallSign) Material.WARPED_WALL_SIGN.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

	public static BlockData CandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData WhiteCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.WHITE_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData OrangeCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.ORANGE_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData MagentaCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.MAGENTA_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData LightBlueCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.LIGHT_BLUE_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData YellowCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.YELLOW_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData LimeCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.LIME_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData PinkCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.PINK_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData GrayCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.GRAY_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData LightGrayCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.LIGHT_GRAY_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData CyanCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.CYAN_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData PurpleCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.PURPLE_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData BlueCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.BLUE_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData BrownCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.BROWN_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData GreenCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.GREEN_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData RedCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.RED_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData BlackCandleCake(boolean lit)
	{
		Lightable data = (Lightable) Material.BLACK_CANDLE_CAKE.createBlockData();
		data.setLit(lit);
		return data;
	}

	public static BlockData CaveVines(int age, boolean berries)
	{
		CaveVines data = (CaveVines) Material.CAVE_VINES.createBlockData();
		data.setAge(age);
		data.setBerries(berries);
		return data;
	}

	public static BlockData CaveVinesPlant(boolean berries)
	{
		CaveVinesPlant data = (CaveVinesPlant) Material.CAVE_VINES_PLANT.createBlockData();
		data.setBerries(berries);
		return data;
	}

	public static BlockData BigDripleafStem(BlockFace facing, boolean waterlogged)
	{
		Dripleaf data = (Dripleaf) Material.BIG_DRIPLEAF_STEM.createBlockData();
		data.setFacing(facing);
		data.setWaterlogged(waterlogged);
		return data;
	}

}